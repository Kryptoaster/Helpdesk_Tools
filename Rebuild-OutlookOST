	$assetName = $textboxComputer.Text + $global:Domain
	
	Invoke-Command -ComputerName $assetName -ScriptBlock {
		
		$isOutlookOpen = Get-Process Outlook* -ErrorAction SilentlyContinue
		$isSkypeOpen = Get-Process Lync*, Skype*, UcMapi*, OfficeClickToRun -ErrorAction SilentlyContinue
		$ostPath = $Env:LocalAppData + "\Microsoft" + "\Outlook"
		$ost = get-ChildItem $OstPath | where { $_.Extension -eq ".ost" }
		$wshell = new-object -com wscript.shell
		
		$isSkypeOpen | ForEach-Object { Stop-Process $isSkypeOpen -Force }
		if ($isOutlookOpen -eq $null)
		{
			$ost | remove-Item
		}
		Else
		{
			While ($isOutlookOpen -ne $null)
			{
				Get-Process outlook* | ForEach-Object { Stop-Process $isOutlookOpen }
				#Sends Yes value when prompted
				$wshell.AppActivate("Microsoft Outlook") | Out-Null
				$wshell.Sendkeys("%(Y)")
				$isOutlookOpen = Get-Process Outlook* -ErrorAction SilentlyContinue | Select-Object -Property ProcessName -ExpandProperty Processname
				Start-Sleep 1
			}
			Start-Sleep 10
			$ost | remove-Item
		}
		Start-sleep 10
		
		#Open Outlook
		function Start-ProcessInteractive
		{
			param (
				$Path = "C:\Program Files\Microsoft Office\root\Office16\Outlook.exe",
				$Arguments = "/cleanclientrules /resetnavpane",
				$Computername = "$env:Computername",
				$Username = "$env:Username"
			)
			
			$xml = @"
				<?xml version="1.0" encoding="UTF-16"?>
				<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
				  <RegistrationInfo />
				  <Triggers />
				  <Settings>
				    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
				    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
				    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
				    <AllowHardTerminate>true</AllowHardTerminate>
				    <StartWhenAvailable>false</StartWhenAvailable>
				    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>
				    <IdleSettings />
				    <AllowStartOnDemand>true</AllowStartOnDemand>
				    <Enabled>true</Enabled>
				    <Hidden>false</Hidden>
				    <RunOnlyIfIdle>false</RunOnlyIfIdle>
				    <WakeToRun>false</WakeToRun>
				    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>
				    <Priority>7</Priority>
				  </Settings>
				  <Actions Context="Author">
				    <Exec>
				      <Command>$Path</Command>
				      <Arguments>$Arguments</Arguments>
				    </Exec>
				  </Actions>
				  <Principals>
				    <Principal id="Author">
				      <UserId>$Username</UserId>
				      <LogonType>InteractiveToken</LogonType>
				      <RunLevel>HighestAvailable</RunLevel>
				    </Principal>
				  </Principals>
				</Task>
"@
			
			$jobname = 'remotejob{0}' -f (Get-Random)
			$filename = [Guid]::NewGuid().ToString('d')
			$filepath = "$env:temp\$filename"
			
			$xml | Set-Content -Path $filepath -Encoding Unicode
			
			try
			{
				$ErrorActionPreference = 'Stop'
				schtasks.exe /CREATE /TN $jobname /XML $filepath /S $ComputerName  2>&1
				schtasks.exe /RUN /TN $jobname /S $ComputerName  2>&1
				schtasks.exe /DELETE /TN $jobname /s $ComputerName /F  2>&1
			}
			catch
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show("While accessing $($Computername): $($_.Exception.Message)", 'Error') # Casting the method to [void] suppresses the output. 
				#Write-Warning ("While accessing \\$ComputerName : " + $_.Exception.Message)
			}
			Remove-Item -Path $filepath
		}
		Start-ProcessInteractive
		
		Start-Sleep 30
	}
